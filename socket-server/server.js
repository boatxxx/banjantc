// üîÅ ‡∏™‡πà‡∏ß‡∏ô import ‡πÅ‡∏•‡∏∞ setup
const express = require("express");
const http = require("http");
const socketIo = require("socket.io");
const webPush = require("web-push");
const bodyParser = require("body-parser");
const cors = require("cors");
const { Sequelize, DataTypes } = require("sequelize");

// ‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
const sequelize = new Sequelize({
  dialect: "mysql",
  host: "localhost",
  username: "root",
  password: "",
  database: "boatsucro"
});

const Notification = sequelize.define('Notification', {
  id: {
    type: Sequelize.INTEGER,
    primaryKey: true,
  },
  title: Sequelize.STRING, // ‡πÉ‡∏´‡πâ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤ `title` ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô Model

  message: Sequelize.STRING,
  classroom_id: Sequelize.INTEGER,
}, {
  timestamps: false, // ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô createdAt ‡πÅ‡∏•‡∏∞ updatedAt
});


// ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Model Subscription
const Subscription = sequelize.define("Subscription", {
  endpoint: {
    type: DataTypes.STRING,
    allowNull: false,
  },
  keys: {
    type: DataTypes.JSON,
    allowNull: false,
  },
  classroom_id: {
    type: DataTypes.INTEGER,
    allowNull: false,
  }
});

// ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á express app + socket server
const app = express();
const server = http.createServer(app);
const io = socketIo(server);

// ‚úÖ Middleware
app.use(cors());
app.use(bodyParser.json());

// ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Web Push
const vapidKeys = {
  publicKey: "BB7Gi4jGcM0nuyNx2XYIwXu4Gv10z6yuTszxgTtOxOgGsk_Yo3IC0hXKP3XnPy4IRAptcVP0F8nlVsgD8oxdIx8",
  privateKey: "g3dKSfkfWaDJcJeW8c1XjFqdugOuNWn8tTzYK4c_F9c"
};

webPush.setVapidDetails(
  "mailto:boatsucro01@gmail.com",
  vapidKeys.publicKey,
  vapidKeys.privateKey
);

// üìå ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á subscriptions ‡∏Ç‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
async function getSubscriptionsByClassroom(classroomId) {
  return await Subscription.findAll({ where: { classroom_id: classroomId } });
}

// ‚úÖ ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
app.post("/subscribe", async (req, res) => {
  const subscription = req.body;

  const existing = await Subscription.findOne({
    where: { endpoint: subscription.endpoint }
  });

  if (!existing) {
    await Subscription.create({
      endpoint: subscription.endpoint,
      keys: subscription.keys,
      classroom_id: subscription.classroom_id
    });
  }

  res.status(201).json({ message: "Subscribed successfully!" });
});

// üì¢ ‡∏™‡πà‡∏á Push Notification
async function sendPushNotifications(subscriptions, message) {
  const payload = JSON.stringify({
    title: "üì¢ ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ô",
    body: message || "‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÉ‡∏´‡∏°‡πà"
  });

  for (const sub of subscriptions) {
    try {
      await webPush.sendNotification(sub.endpoint, payload);
    } catch (err) {
      console.error("‚ùå Error sending notification:", err);
    }
  }
}

// ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô + ‡∏™‡πà‡∏á
app.post("/save-notification", async (req, res) => {
  const { message, classroomId } = req.body;

  await Notification.create({
    message: message,
    classroom_id: classroomId,
    created_at: new Date(),
  });

  const subscriptions = await getSubscriptionsByClassroom(classroomId);
  await sendPushNotifications(subscriptions, message);

  res.status(201).json({ message: "Notification saved and sent!" });
});

// üéØ Socket.io ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
io.on("connection", (socket) => {
  console.log("‚úÖ A client connected");

  socket.on("sendMessage", async (message) => {
    console.log("üì© Message from client:", message);

    const classroomId = message.classroom_id;
    const subscriptions = await getSubscriptionsByClassroom(classroomId);

    const payload = JSON.stringify({
      title: "üì¢ ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà!",
      body: message.body
    });

    for (const sub of subscriptions) {
      try {
        await webPush.sendNotification(sub.endpoint, payload);
      } catch (err) {
        console.error("‚ùå Error sending push notification:", err);
      }
    }

    io.emit(`newMessage_${classroomId}`, message);
  });
});

// üîç Route ‡πÄ‡∏ä‡πá‡∏Ñ‡∏´‡∏ô‡πâ‡∏≤‡πÄ‡∏ß‡πá‡∏ö
app.get("/", (req, res) => {
  res.send("üì¢ Socket Server is running!");
});

app.get("/send-notification", (req, res) => {
  res.send("Hello, this is the send-notification route!");
});

// üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô server
server.listen(3000, async () => {
  try {
    await sequelize.authenticate();
    await sequelize.sync();
    console.log("üöÄ Server is running on port 3000 and DB is connected");
  } catch (error) {
    console.error("‚ùå Unable to connect to the database:", error);
  }
});
const { Op } = require("sequelize");

// üëá ‡πÄ‡∏û‡∏¥‡πà‡∏° Model ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö push_subscriptions
const PushSubscription = sequelize.define("PushSubscription", {
  endpoint: {
    type: DataTypes.STRING,
    allowNull: false,
  },
  keys_p256dh: {
    type: DataTypes.STRING,
    allowNull: false,
  },
  keys_auth: {
    type: DataTypes.STRING,
    allowNull: false,
  },
  classroom_id: {
    type: DataTypes.INTEGER,
    allowNull: false,
  }
}, {
  tableName: 'push_subscriptions',
  timestamps: false
});
let lastCheckedNotificationId = 0; // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô

// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏´‡∏°‡πà‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î ‡πÅ‡∏•‡∏∞‡∏™‡πà‡∏á Push
async function checkAndSendNotifications() {
  try {
    const latest = await Notification.findOne({
      order: [['created_at', 'DESC']],
    });

    if (!latest || latest.id === lastCheckedNotificationId) return;

    lastCheckedNotificationId = latest.id; // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ß‡πà‡∏≤‡∏≠‡∏±‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏±‡∏ô‡∏ô‡∏µ‡πâ

    const classroomId = latest.classroom_id;
    const title = latest.title || "‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏´‡∏°‡πà";
    const url = "https://www.google.com"; // URL ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß

    const subscriptions = await PushSubscription.findAll({
      where: { classroom_id: classroomId }
    });

    const payload = JSON.stringify({
      title: `üì¢ ${title}`,
      body: "‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î",
      url: url
    });

    for (const sub of subscriptions) {
      const pushData = {
        endpoint: sub.endpoint,
        keys: {
          p256dh: sub.keys_p256dh,
          auth: sub.keys_auth
        }
      };

      try {
        await webPush.sendNotification(pushData, payload);
        console.log(`üì® ‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ñ‡∏∂‡∏á ${sub.endpoint}`);
      } catch (error) {
        console.error("‚ùå ‡∏™‡πà‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", error);
      }
    }
  } catch (error) {
    console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô checkAndSendNotifications:", error);
  }
}

setInterval(async () => {
  try {
    console.log("üîç ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏´‡∏°‡πà...");
    await checkAndSendNotifications();
    console.log("‚úÖ ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!");
  } catch (error) {
    console.error("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô:", error);
  }
}, 1 * 30 * 1000); // ‡∏ó‡∏∏‡∏Å 10 ‡∏ô‡∏≤‡∏ó‡∏µ (10 * 60 * 1000 ‡∏°‡∏¥‡∏•‡∏•‡∏¥‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ)
